package sts;

import org.testng.Assert;
import org.testng.annotations.Test;

public class MergeUnique {

    int[] mergeUnique(int[] a, int[] b) {
        if (a == null) a = new int[]{};
        if (b == null) b = new int[]{};
        int[] out = new int[a.length + b.length];

        int apos = 0;
        int bpos = 0;
        int opos = 0;

        while (apos < a.length || bpos < b.length) {
            int tmp;

            if (apos >= a.length) {
                tmp = b[bpos++];
            } else if (bpos >= b.length) {
                tmp = a[apos++];
            } else {
                tmp = a[apos] < b[bpos] ? a[apos++] : b[bpos++];
            }

            if (opos == 0 || out[opos-1] != tmp) out[opos++] = tmp;
        }

        int[] res = new int[opos];

        System.arraycopy(out, 0, res, 0, opos);

        return res;
    }

    @Test
    void testMerge() {
        Assert.assertEquals(mergeUnique(null, null), new int[]{});
        Assert.assertEquals(mergeUnique(new int[]{}, null), new int[]{});
        Assert.assertEquals(mergeUnique(null, new int[]{}), new int[]{});
        Assert.assertEquals(mergeUnique(new int[]{}, new int[]{}), new int[]{});
        Assert.assertEquals(mergeUnique(new int[]{3}, null), new int[]{3});
        Assert.assertEquals(mergeUnique(null, new int[]{3}), new int[]{3});
        Assert.assertEquals(mergeUnique(new int[]{3}, new int[]{3}), new int[]{3});

        Assert.assertEquals(mergeUnique(new int[]{1,3,5,7,9,11}, new int[]{2,4,6,8,10}), new int[]{1,2,3,4,5,6,7,8,9,10,11});
        Assert.assertEquals(mergeUnique(new int[]{1,2,3,4,5,6,7,8,9,10,11}, new int[]{1,2,3,4,5,6,7,8,9,10,11}), new int[]{1,2,3,4,5,6,7,8,9,10,11});
        Assert.assertEquals(mergeUnique(new int[]{1,3,5,6,7,9,11}, new int[]{2,4,6,7,8,10}), new int[]{1,2,3,4,5,6,7,8,9,10,11});
    }

}
